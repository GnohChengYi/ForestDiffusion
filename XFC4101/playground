from ForestDiffusion import ForestDiffusionModel


# Scatter plot of the first two variables of X
def plot_scatter(X, index1=0, index2=1):
    print('plotting...')
    import matplotlib.pyplot as plt
    plt.scatter(X[:, index1], X[:, index2])
    plt.xlabel('Variable 1')
    plt.ylabel('Variable 2')
    plt.title('Scatter plot of the first two variables of X')
    plt.show()
    print('finish plotting')


# Iris: numpy dataset with 4 variables (all numerical) and 1 outcome (categorical)
print('setting up dataset...')
from sklearn.datasets import load_iris
import numpy as np
my_data = load_iris()
X, y = my_data['data'], my_data['target']
Xy = np.concatenate((X, np.expand_dims(y, axis=1)), axis=1)
print('finish setting up dataset')

plot_scatter(X)

# Classification problem (outcome is categorical)
print('starting classification...')
forest_model = ForestDiffusionModel(X, label_y=y, n_t=50, duplicate_K=100, bin_indexes=[], cat_indexes=[], int_indexes=[], diffusion_type='flow', n_jobs=-1)
Xy_fake = forest_model.generate(batch_size=X.shape[0]) # last variable will be the label_y
print('finish classification')

plot_scatter(Xy_fake)

# Regression problem (outcome is continuous)
print('starting regression...')
Xy = np.concatenate((X, np.expand_dims(y, axis=1)), axis=1)
forest_model = ForestDiffusionModel(Xy, n_t=50, duplicate_K=100, bin_indexes=[], cat_indexes=[4], int_indexes=[], diffusion_type='flow', n_jobs=-1)
Xy_fake = forest_model.generate(batch_size=X.shape[0])
print('finish regression')
plot_scatter(Xy_fake)